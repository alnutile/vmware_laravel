---
- hosts: localhost:base-ubuntu
  vars:
    - user: ubuntu
    - docroot: /home/{{ user }}/app
    - app_env: false
    - rebuild_env: true
    - env_vars: false
    - fixed_envs: ['APP_KEY', 'DB_PASSWORD', 'DB_DATABASE', 'DB_USERNAME']
    - slack_token: T025L7FG8/B0LS8P62G/PRc429X0u1O5jHxYDzAI0POW
    - cfn_info: ''

  tasks:
    - name: Read CFN_INFO
      set_fact:
        cfn_info: "{{ lookup('ini', 'Stack type=properties file=/home/' + user + '/.CFN_INFO') }}"
      ignore_errors: True

    - name: Notify Slack Global Settings script starts
      slack:
        token: "{{ slack_token }}"
        msg: "[{{ cfn_info }}] - global_system_settings.yml starts"
        color: good

    - name: Update AWS CLI
      become: yes
      command: pip install --upgrade awscli

    - name: Get Latest Ansible scripts
      become: no
      command: aws s3 cp --recursive s3://cat-provision-config/base-ec2 /home/{{ user }}/base-ec2

    - name: Back up original authorized_keys
      become: no
      copy: src=/home/{{ user }}/.ssh/authorized_keys dest=/home/{{ user }}/.ssh/authorized_keys_orig force=no

    - name: Make App Directory
      become: yes
      file: path={{ docroot }} state=directory mode=0775 owner={{ user }} group=www-data

    - name: Notify Slack ENV starts
      slack:
        token: "{{ slack_token }}"
        msg: "[{{ cfn_info }}] - Building .env file"
        color: good
      when: rebuild_env == true and env_vars != false

    - name: Check if these fixed_envs are already set
      env_facts: src={{ docroot }}/.env vars={{ fixed_envs }}
      when: rebuild_env == true and env_vars != false

    - name: Setup ENV but exclude those fixed_envs that already have values
      template: src=templates/env.j2 dest={{ docroot }}/.env
      when: rebuild_env == true and env_vars != false
      with_items:
        - { exclude: "{{ current_envs | default(false) }}" }

    - name: Notify Slack ENV done
      slack:
        token: "{{ slack_token }}"
        msg: "[{{ cfn_info }}] - Done building .env file"
        color: good
      when: rebuild_env == true and env_vars != false

    - name: Clean Temp Area
      become: yes
      file: path=/tmp/keys state=absent

    - name: Clean authorized_keys
      become: yes
      file: path=/tmp/authorized_keys state=absent

    - name: Make Temp Area
      become: no
      file: path=/tmp/keys state=directory

    - name: Get public keys From S3
      become: no
      command: aws s3 cp s3://ssh-public-keys-cloud-app-team/non-production /tmp/keys --recursive

    - name: Copy AuthOrig into the mix
      become: no
      copy: src=/home/{{ user }}/.ssh/authorized_keys_orig dest=/tmp/keys force=no

    - name: Make New authorized_keys
      become: no
      assemble: src=/tmp/keys dest=/tmp/authorized_keys
      register: auth_keys_made

    - name: Move the new authorized_keys to home
      become: no
      when: auth_keys_made|success
      command: cp /tmp/authorized_keys /home/{{ user }}/.ssh/authorized_keys

    - name: Run Every Few Bits for local
      become: no
      cron: name="provision" minute="5" job="ansible-playbook --limit localhost /home/{{ user }}/base-ec2/global_system_settings.yml -u {{ user }} -i 'localhost' --extra-vars \"rebuild_env=false\" --module-path=/home/{{ user }}/base-ec2/custom_modules" user={{ user }}
      when: not app_env

    - name: Run Every Few Bits for non-local
      become: no
      cron: name="provision" minute="5" job="ansible-playbook --limit localhost /home/{{ user }}/base-ec2/global_system_settings.yml -u {{ user }} -i 'localhost' --extra-vars \"app_env={{ app_env }} rebuild_env=false\" --module-path=/home/{{ user }}/base-ec2/custom_modules" user={{ user }}
      when: app_env != false

    - name: Notify Slack Global Settings script done
      slack:
        token: "{{ slack_token }}"
        msg: "[{{ cfn_info }}] - global_system_settings.yml done"
        color: good
